"""
namedtuples - tuplas imut√°veis com nomes para valores
Usamos namedtuples para criar classes de objetos que s√£o apenas um
agrupamento de atributos, como classes normais sem m√©todos, ou registros de
bases de dados, etc.
As namedtuples s√£o imut√°veis assim como as tuplas.
https://docs.python.org/3/library/collections.html#collections.namedtuple
https://docs.python.org/3/library/typing.html#typing.NamedTuple
https://brasilescola.uol.com.br/curiosidades/baralho.htm
"""
from collections import namedtuple
from typing import NamedTuple

class Carta1(NamedTuple): # Herdamos a classe NamedTuple para indicar a classe que seus atributos s√£o chaves nomeadas de uma tupla
    valor: str = 'Valor'
    naipe: str = 'Naipe'

Carta = namedtuple('Carta', ['Valor', 'Naipe'], # Usar a fun√ß√£o namedtuple faz exatamente a mesma coisa, nesse caso passamos o primeiro par√¢metro o nome da classe e a seguir as chaves
                   defaults=['', 'üò∂']) # as chaves s√£o colocadas dentro de uma lista, tamb√©m podemos passar valores padr√£o usando o par√¢mentro defaults=[valores]
as_espada = Carta('A', '‚ô†') # Ent√£o passamos os valores para as chaves, que obviamente sustituir√£o os valores padr√£o
print(as_espada)
print(as_espada.Naipe) # Dessa forma n√£o precisamos passar o ind√≠ce para chamar um valor, mas sim o nome da chave como est√° sendo mostrado nessa linha
print(as_espada[0]) # Mas se quiser usar ind√≠ces tamb√©m funciona
print(as_espada.Valor)
print(as_espada[1])
print()

for valor in as_espada:
    print(valor) # Itera sobre os valores passados
    print(as_espada._fields) # O _fields mostra todas as chaves existente
    print(as_espada._field_defaults) # E o _fields_defaults retorna as chaves e os valores padr√£o
print()

print(as_espada._asdict()) # _asdict converte para dicion√°rio

